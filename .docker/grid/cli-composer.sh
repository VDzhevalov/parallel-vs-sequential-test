#!/bin/bash

set -e

source ~/.venvs/podman/bin/activate

COMPOSE_FILE="podman-compose.yml"
COMPOSE_PATH="$(dirname "$0")"
FULL_COMPOSE_PATH="$COMPOSE_PATH/$COMPOSE_FILE"
ENV_PATH="$COMPOSE_PATH/.env"

if [ ! -f "$FULL_COMPOSE_PATH" ]; then
  echo "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª $FULL_COMPOSE_PATH"
  exit 1
fi

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
if [ -f "$ENV_PATH" ]; then
  source "$ENV_PATH"
else
  echo "‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: $ENV_PATH"
fi

COMMAND="$1"
ACTION="$2"
PROFILE="$3"

compose() {
  podman-compose -f "$FULL_COMPOSE_PATH" "$@"
}

case "$COMMAND" in
  up)
    if [[ "$PROFILE" != "" ]]; then
      echo "üöÄ –ü—ñ–¥—ñ–π–º–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å: $PROFILE"
      podman-compose --profile "$PROFILE" -f "$FULL_COMPOSE_PATH" up -d
    else
      echo "üöÄ –ü—ñ–¥—ñ–π–º–∞—î–º–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏"
      compose --profile tests --profile report up -d
      podman ps
    fi
    ;;
  down)
    if [[ "$PROFILE" != "" ]]; then
      echo "üí™ –ó—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å: $PROFILE  $FULL_COMPOSE_PATH"
      podman pod stop pod_grid || true
      podman-compose --profile "$PROFILE" -f "$FULL_COMPOSE_PATH" down
    else
      echo "üí™ –ó—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏  $FULL_COMPOSE_PATH"
      podman pod stop pod_grid || true
      compose down
    fi
    ;;
  build)
    if [[ "$PROFILE" != "" ]]; then
      echo "üî® –ó–±–∏—Ä–∞—î–º–æ –æ–±—Ä–∞–∑–∏ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é: $PROFILE"
      podman-compose --profile "$PROFILE" -f "$FULL_COMPOSE_PATH" build
    else
      echo "üî® –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –æ–±—Ä–∞–∑–∏"
      podman-compose --profile tests --profile report -f "$FULL_COMPOSE_PATH" build
    fi
    ;;
  ps)
    echo "üì¶ –ü–µ—Ä–µ–ª—ñ–∫ –∑–∞–ø—É—â–µ–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ (—á–µ—Ä–µ–∑ podman)"
    podman ps --format "üîπ {{.Names}} ‚Äî {{.Status}} ‚Äî {{.Ports}}"
    ;;
  logs)
    echo "üìú –õ–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    compose logs -f
    ;;
  exec)
    SERVICE="$ACTION"
    if [ -z "$SERVICE" ]; then
      echo "‚ùå –í–∫–∞–∂–∏ —ñ–º'—è —Å–µ—Ä–≤—ñ—Å—É (nap—Ä., tests –∞–±–æ web)"
      exit 1
    fi
    shift 2
    echo "‚öôÔ∏è –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É —É $SERVICE: $*"
    podman-compose -f "$FULL_COMPOSE_PATH" exec "$SERVICE" "$@"
    ;;
  conn)
    SERVICE="$ACTION"
    if [ -z "$SERVICE" ]; then
      echo "‚ùå –í–∫–∞–∂–∏ —ñ–º'—è —Å–µ—Ä–≤—ñ—Å—É (nap—Ä., tests –∞–±–æ web)"
      exit 1
    fi
    echo "üîê –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ $SERVICE"
    podman  exec -it "$SERVICE" /bin/bash
    ;;
  volume-path)
    if [ -z "$VOLUME_NAME" ]; then
      echo "‚ùå –ó–º—ñ–Ω–Ω–∞ VOLUME_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä —Ñ–∞–π–ª .env"
      exit 1
    fi

    echo "üîç –®—É–∫–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ volume: $VOLUME_NAME"

    VOLUME_INFO=$(podman volume inspect "$VOLUME_NAME" 2>/dev/null)

    if [ $? -ne 0 ]; then
      echo "‚ùå Volume $VOLUME_NAME –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
      exit 1
    fi

    MOUNTPOINT=$(echo "$VOLUME_INFO" | grep -oP '"Mountpoint":\s*"\K[^"]+')
    echo "üìÇ Volume $VOLUME_NAME –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –∑–∞ —à–ª—è—Ö–æ–º:"
    echo "$MOUNTPOINT"

    if [[ "$ACTION" == "open" ]]; then
      echo "üìÅ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é..."
      xdg-open "$MOUNTPOINT" >/dev/null 2>&1 || open "$MOUNTPOINT" || echo "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
    fi
    ;;
  *)
    echo "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
    echo "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
    echo "  up [profile]       ‚Äî –ü—ñ–¥–Ω—è—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏. –ü—Ä–æ—Ñ–∞–π–ª–∏: tests(grid –Ω–∞ 2 –Ω–æ–¥–∏ + —Ç–µ—Å—Ç–∏), report - –ø–µ—Ä–µ–≥–ª—è–¥ —Ä–µ–ø–æ—Ä—Ç—ñ–≤"
    echo "  down [profile]     ‚Äî –ó—É–ø–∏–Ω–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏"
    echo "  build [profile]    ‚Äî –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—ñ–≤"
    echo "  ps                 ‚Äî –°—Ç–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "  logs               ‚Äî –õ–æ–≥–∏"
    echo "  exec <service>     ‚Äî –í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ"
    echo "  conn <service>     ‚Äî –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ service=CONTAINER_NAME"
    echo "  volume-path [open] ‚Äî –®–ª—è—Ö –¥–æ volume $VOLUME_NAME (–æ–ø—Ü—ñ–π–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î)"
    ;;
esac